#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОкноПодгрузки = Новый Структура;
	ОкноПодгрузки.Вставить("Начало", ТекущаяДата());
	ОкноПодгрузки.Вставить("Конец", ТекущаяДата());

	ЗаполнитьЗанятия();

	Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
	Календарь.КратностьПериодическогоВарианта = 24;
	Календарь.ОтступСКонцаПереносаШкалыВремени = 3;
	Календарь.ОтступСНачалаПереносаШкалыВремени = 8;

	Календарь.ВыравниватьГраницыЭлементовПоШкалеВремени = Ложь;

	Календарь.ТекущиеПериодыОтображения.Очистить();
	НачалоПериода = НачалоНедели(ТекущаяДатаСеанса());
	КонецПериода = КонецНедели(ТекущаяДатаСеанса());
	НовыйЭлементПериод = Календарь.ТекущиеПериодыОтображения.Добавить(НачалоПериода, КонецПериода);

	Календарь.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;

КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ДатаОтображения = ТекущаяДата();

КонецПроцедуры
#КонецОбласти

#Область ПроцедурыИФункции
&НаСервере
Процедура ФормаДеньНаСервере()

	ВариантПериода = "День";

КонецПроцедуры

&НаСервере
Процедура ФормаНеделяНаСервере()

	ВариантПериода = "Неделя";

КонецПроцедуры

&НаСервере
Процедура ФормаМесяцНаСервере()

	ВариантПериода = "Месяц";

КонецПроцедуры

&НаКлиенте
Процедура ФормаМесяц(Команда)

	ФормаМесяцНаСервере();

	ПриИзмененииВариантПериода();

КонецПроцедуры

&НаКлиенте
Процедура ФормаНеделя(Команда)

	ФормаНеделяНаСервере();

	ПриИзмененииВариантПериода();

КонецПроцедуры

&НаКлиенте
Процедура ФормаДень(Команда)

	ФормаДеньНаСервере();

	ПриИзмененииВариантПериода();

КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуТекущегоЭлементаПланировщика();

КонецПроцедуры

Процедура ЗаполнитьЗанятия()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Группы.Тренер КАК Тренер,
		|	Группы.Расписание КАК Расписание,
		|	Группы.Ссылка КАК Группа
		|ПОМЕСТИТЬ ВТ_Расписаний
		|ИЗ
		|	Справочник.Группы КАК Группы
		|ГДЕ
		|	Группы.Тренер = &Тренер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШаблонЗаполнения.Ссылка КАК ГрафикРаботы,
		|	МАКСИМУМ(ШаблонЗаполнения.НомерСтроки) КАК ДлинаЦикла
		|ПОМЕСТИТЬ ВТДлинаЦиклаГрафиков
		|ИЗ
		|	ВТ_Расписаний КАК ВТ_Расписаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.ШаблонЗаполнения КАК ШаблонЗаполнения
		|		ПО ВТ_Расписаний.Расписание = ШаблонЗаполнения.Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ШаблонЗаполнения.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.Календарь КАК ГрафикРаботы,
		|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
		|	РАЗНОСТЬДАТ(Календари.ДатаОтсчета, КалендарныеГрафики.ДатаГрафика, ДЕНЬ) + 1 КАК ДнейОтДатыОтсчета,
		|	ЛОЖЬ КАК ПредпраздничныйДень
		|ПОМЕСТИТЬ ВТДниВключенныеВГрафик
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Календари КАК Календари
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Расписаний КАК ВТ_Расписаний
		|			ПО ВТ_Расписаний.Расписание = Календари.Ссылка
		|		ПО КалендарныеГрафики.Календарь = Календари.Ссылка
		|		И КалендарныеГрафики.ДатаГрафика МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		И КалендарныеГрафики.ДеньВключенВГрафик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДниВключенныеВГрафик.ГрафикРаботы КАК ГрафикРаботы,
		|	ДниВключенныеВГрафик.ДатаГрафика КАК ДатаГрафика,
		|	ВЫБОР
		|		КОГДА ДниВключенныеВГрафик.РезультатДеленияПоМодулю = 0
		|			ТОГДА ДниВключенныеВГрафик.ДлинаЦикла
		|		ИНАЧЕ ДниВключенныеВГрафик.РезультатДеленияПоМодулю
		|	КОНЕЦ КАК НомерДня,
		|	ДниВключенныеВГрафик.ПредпраздничныйДень КАК ПредпраздничныйДень
		|ПОМЕСТИТЬ ВТДатыНомераДней
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДниВключенныеВГрафик.ГрафикРаботы КАК ГрафикРаботы,
		|		ДниВключенныеВГрафик.ДатаГрафика КАК ДатаГрафика,
		|		ДниВключенныеВГрафик.ПредпраздничныйДень КАК ПредпраздничныйДень,
		|		ДниВключенныеВГрафик.ДлинаЦикла КАК ДлинаЦикла,
		|		ДниВключенныеВГрафик.ДнейОтДатыОтсчета - ДниВключенныеВГрафик.ЦелаяЧастьРезультатаДеления *
		|			ДниВключенныеВГрафик.ДлинаЦикла КАК РезультатДеленияПоМодулю
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ДниВключенныеВГрафик.ГрафикРаботы КАК ГрафикРаботы,
		|			ДниВключенныеВГрафик.ДатаГрафика КАК ДатаГрафика,
		|			ДниВключенныеВГрафик.ПредпраздничныйДень КАК ПредпраздничныйДень,
		|			ДниВключенныеВГрафик.ДнейОтДатыОтсчета КАК ДнейОтДатыОтсчета,
		|			ДлинаЦиклов.ДлинаЦикла КАК ДлинаЦикла,
		|			ВЫРАЗИТЬ(ДниВключенныеВГрафик.ДнейОтДатыОтсчета / ДлинаЦиклов.ДлинаЦикла КАК ЧИСЛО(15, 0)) - ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(ДниВключенныеВГрафик.ДнейОтДатыОтсчета / ДлинаЦиклов.ДлинаЦикла КАК ЧИСЛО(15,
		|					0)) > ДниВключенныеВГрафик.ДнейОтДатыОтсчета / ДлинаЦиклов.ДлинаЦикла
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЦелаяЧастьРезультатаДеления
		|		ИЗ
		|			ВТДниВключенныеВГрафик КАК ДниВключенныеВГрафик
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Календари КАК Календари
		|				ПО ДниВключенныеВГрафик.ГрафикРаботы = Календари.Ссылка
		|				И Календари.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафикаРаботы.ПоЦикламПроизвольнойДлины)
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДлинаЦиклаГрафиков КАК ДлинаЦиклов
		|				ПО ДниВключенныеВГрафик.ГрафикРаботы = ДлинаЦиклов.ГрафикРаботы) КАК ДниВключенныеВГрафик) КАК
		|		ДниВключенныеВГрафик
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДниВключенныеВГрафик.ГрафикРаботы,
		|	ДниВключенныеВГрафик.ДатаГрафика,
		|	ДЕНЬНЕДЕЛИ(ДниВключенныеВГрафик.ДатаГрафика),
		|	ДниВключенныеВГрафик.ПредпраздничныйДень
		|ИЗ
		|	ВТДниВключенныеВГрафик КАК ДниВключенныеВГрафик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Календари КАК Календари
		|		ПО ДниВключенныеВГрафик.ГрафикРаботы = Календари.Ссылка
		|ГДЕ
		|	Календари.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафикаРаботы.ПоНеделям)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДниВключенныеВГрафик.ГрафикРаботы КАК ГрафикРаботы,
		|	ДниВключенныеВГрафик.ДатаГрафика КАК ДатаГрафика,
		|	ДниВключенныеВГрафик.НомерДня КАК НомерДня,
		|	ЕСТЬNULL(РасписанияРаботыПредпраздничногоДня.ВремяНачала, РасписанияРаботы.ВремяНачала) КАК ВремяНачала,
		|	ЕСТЬNULL(РасписанияРаботыПредпраздничногоДня.ВремяОкончания, РасписанияРаботы.ВремяОкончания) КАК ВремяОкончания
		|ПОМЕСТИТЬ ВТРасписанияРаботы
		|ИЗ
		|	ВТДатыНомераДней КАК ДниВключенныеВГрафик
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК РасписанияРаботы
		|		ПО РасписанияРаботы.Ссылка = ДниВключенныеВГрафик.ГрафикРаботы
		|		И РасписанияРаботы.НомерДня = ДниВключенныеВГрафик.НомерДня
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари.РасписаниеРаботы КАК РасписанияРаботыПредпраздничногоДня
		|		ПО РасписанияРаботыПредпраздничногоДня.Ссылка = ДниВключенныеВГрафик.ГрафикРаботы
		|		И РасписанияРаботыПредпраздничногоДня.НомерДня = 0
		|		И ДниВключенныеВГрафик.ПредпраздничныйДень
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДниВключенныеВГрафик.ГрафикРаботы,
		|	ДниВключенныеВГрафик.ДатаГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРасписанияРаботы.ГрафикРаботы КАК ГрафикРаботы,
		|	ВТРасписанияРаботы.ДатаГрафика КАК ДатаГрафика,
		|	ВТРасписанияРаботы.НомерДня КАК НомерДня,
		|	ВТРасписанияРаботы.ВремяНачала КАК ВремяНачала,
		|	ВТРасписанияРаботы.ВремяОкончания КАК ВремяОкончания,
		|	ВТ_Расписаний.Группа КАК Группа
		|ИЗ
		|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Расписаний КАК ВТ_Расписаний
		|		ПО ВТРасписанияРаботы.ГрафикРаботы = ВТ_Расписаний.Расписание";

	Запрос.УстановитьПараметр("Тренер", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоНедели(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецНедели(ТекущаяДатаСеанса()));

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл

		ДатаНачала = Выборка.ДатаГрафика + (Выборка.ВремяНачала - Дата(1,1,1));
		ДатаОкончания = Выборка.ДатаГрафика + (Выборка.ВремяОкончания - Дата(1,1,1));
		НовыйЭлемент = Календарь.Элементы.Добавить(ДатаНачала, ДатаОкончания);
		НовыйЭлемент.Текст = Выборка.ГрафикРаботы;
		НовыйЭлемент.Значение = Выборка.Группа;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()

	ЗначениеЭлемента = Элементы.Календарь.ВыделенныеЭлементы[0].Значение;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", ЗначениеЭлемента);
	ОткрытьФорму("Документ.Занятие.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВариантПериода()

	ВыделитьДатыОтображения(ЭтотОбъект);
	ВыделитьПериодОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериодаВЗаголовке(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	ОбновитьДанныеПланировщикаКлиент();

 КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)

	Результат = Новый Структура("ДатаНачала, ДатаОкончания");

	Если ВариантПериода = "День" Тогда

		Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
		Результат.ДатаОкончания	= КонецДня(ДатаОтображения);

	ИначеЕсли ВариантПериода = "Неделя" Тогда

		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);

	ИначеЕсли ВариантПериода = "Месяц" Тогда

		Результат.ДатаНачала	= НачалоМесяца(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецМесяца(КонецМесяца(ДатаОтображения));

	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериодаВЗаголовке(Форма)

	Если Форма.ВариантПериода = "День" Тогда

	Форма.Заголовок = Формат(Форма.ДатаОтображения, "ДФ='ddd, d MMM yyyy'");

	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда

	ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	Форма.Заголовок = СтрШаблон(
	"%1 - %2",
	Формат(ПериодДанных.ДатаНачала, "ДФ='d MMM'"),
	Формат(ПериодДанных.ДатаОкончания, "ДФ='d MMM yyyy'")
		);

	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда

		Форма.Заголовок = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьПериодОтображения(Форма)

	Форма.Элементы.ФормаДень.Пометка = Ложь;
	Форма.Элементы.ФормаНеделя.Пометка = Ложь;
	Форма.Элементы.ФормаМесяц.Пометка = Ложь;

	Если Форма.ВариантПериода = "День" Тогда
		Форма.Элементы.ФормаДень.Пометка = Истина;
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		Форма.Элементы.ФормаНеделя.Пометка = Истина;
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		Форма.Элементы.ФормаМесяц.Пометка = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьДатыОтображения(Форма)

	ПолеКалендаря = Форма.Элементы.ДатаОтображения;

	ПолеКалендаря.ВыделенныеДаты.Очистить();

	Если Форма.ВариантПериода = "Месяц" Тогда

		ПериодДанных = Новый Структура("ДатаНачала, ДатаОкончания");
		ПериодДанных.ДатаНачала		= НачалоМесяца(Форма.ДатаОтображения);
		ПериодДанных.ДатаОкончания	= КонецМесяца(Форма.ДатаОтображения);
	Иначе
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	КонецЕсли;

	ТекДата = ПериодДанных.ДатаНачала;

	Пока ТекДата < ПериодДанных.ДатаОкончания Цикл
		ПолеКалендаря.ВыделенныеДаты.Добавить(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеПланировщика()

	Если ВариантПериода = "День" Тогда

		Элементы.Календарь.ГиперссылкаПеренесенногоЗаголовкаШкалыВремени = Ложь;
		Элементы.Календарь.ГиперссылкаЭлементаШкалыВремени = Ложь;
		Календарь.ФиксироватьЗаголовокШкалыВремени = Истина;
		Календарь.ОтображатьТекущуюДату = Истина;
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Календарь.КратностьПериодическогоВарианта = 24;
		Календарь.ОтступСНачалаПереносаШкалыВремени = 9;
		Календарь.ОтступСКонцаПереносаШкалыВремени = 6;
		Календарь.ОтображатьПеренесенныеЗаголовки = Истина;
		Календарь.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Календарь.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачала;
		Календарь.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd" + Символы.ПС + "d MMMM'";
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Календарь.ШкалаВремени.Элементы[0].Формат = "ДФ=HH:mm";
		Календарь.ШкалаВремени.Элементы[0].Кратность = 1;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;

		Если Календарь.ШкалаВремени.Элементы.Количество() = 1 Тогда
			Календарь.ШкалаВремени.Элементы.Добавить();
		КонецЕсли;

		Календарь.ШкалаВремени.Элементы[1].Кратность = 30;
		Календарь.ШкалаВремени.Элементы[1].Единица = ТипЕдиницыШкалыВремени.Минута;
		Календарь.ШкалаВремени.Элементы[1].ОтображатьПериодическиеМетки = Ложь;

	ИначеЕсли ВариантПериода = "Неделя" Тогда

		Элементы.Календарь.ГиперссылкаПеренесенногоЗаголовкаШкалыВремени = Истина;
		Элементы.Календарь.ГиперссылкаЭлементаШкалыВремени = Ложь;
		Календарь.ФиксироватьЗаголовокШкалыВремени = Истина;
		Календарь.ОтображатьТекущуюДату = Истина;
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Календарь.КратностьПериодическогоВарианта = 24;
		Календарь.ОтступСНачалаПереносаШкалыВремени = 9;
		Календарь.ОтступСКонцаПереносаШкалыВремени = 6;
		Календарь.ОтображатьПеренесенныеЗаголовки = Истина;
		Календарь.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Календарь.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Календарь.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd" + Символы.ПС + "d MMMM'";
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Календарь.ШкалаВремени.Элементы[0].Формат = "ДФ=HH:mm";
		Календарь.ШкалаВремени.Элементы[0].Кратность = 1;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;

		Если Календарь.ШкалаВремени.Элементы.Количество() = 1 Тогда
			Календарь.ШкалаВремени.Элементы.Добавить();
		КонецЕсли;

		Календарь.ШкалаВремени.Элементы[1].Кратность = 30;
		Календарь.ШкалаВремени.Элементы[1].Единица = ТипЕдиницыШкалыВремени.Минута;
		Календарь.ШкалаВремени.Элементы[1].ОтображатьПериодическиеМетки = Ложь;

	ИначеЕсли ВариантПериода = "Месяц" Тогда

		Элементы.Календарь.ГиперссылкаПеренесенногоЗаголовкаШкалыВремени = Ложь;
		Элементы.Календарь.ГиперссылкаЭлементаШкалыВремени = Истина;
		Календарь.ФиксироватьЗаголовокШкалыВремени = Ложь;
		Календарь.ОтображатьТекущуюДату = Ложь;
		Календарь.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Календарь.КратностьПериодическогоВарианта = 7;
		Календарь.ОтступСНачалаПереносаШкалыВремени = 0;
		Календарь.ОтступСКонцаПереносаШкалыВремени = 0;
		Календарь.ОтображатьПеренесенныеЗаголовки = Ложь;
		Календарь.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Календарь.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Календарь.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;

		Если Календарь.ШкалаВремени.Элементы.Количество() = 2 Тогда
			Календарь.ШкалаВремени.Элементы.Удалить(Календарь.ШкалаВремени.Элементы.Получить(1));
		КонецЕсли;

		Календарь.ШкалаВремени.Элементы[0].Формат = "ДФ='" + Символы.НПП + "d MMM, ddd'";
		Календарь.ШкалаВремени.Элементы[0].Кратность = 1;
		Календарь.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;


		Интервал = Календарь.ИнтервалыФона.Добавить(НачалоНедели(НачалоМесяца(ДатаОтображения)), НачалоМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(230, 230, 230);

		Интервал = Календарь.ИнтервалыФона.Добавить(КонецМесяца(ДатаОтображения), КонецНедели(КонецМесяца(ДатаОтображения)));
		Интервал.Цвет = Новый Цвет(230, 230, 230);

		ТекущаяДата = ТекущаяДата();
		Интервал = Календарь.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДата), КонецДня(ТекущаяДата));
		Интервал.Цвет = Новый Цвет(223, 255, 223);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПланировщикаКлиент(ПлавнаяПрокрутка = Ложь)

	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);

	НужноПодгрузитьЭлементы = Ложь;

	Если ПлавнаяПрокрутка Тогда
		Если ОкноПодгрузки.Конец <= ПериодДанных.ДатаОкончания 
			ИЛИ ОкноПодгрузки.Начало >= ПериодДанных.ДатаНачала Тогда
			НужноПодгрузитьЭлементы = Истина;
		КонецЕсли;
	Иначе
		НужноПодгрузитьЭлементы = Истина;
	КонецЕсли;

	Если НужноПодгрузитьЭлементы Тогда

		ОбновитьОкноПодгрузки();

	КонецЕсли;

	Если Не ПлавнаяПрокрутка ИЛИ НужноПодгрузитьЭлементы Тогда
		// ВнешнийВидПланировщика
		Календарь.ИнтервалыФона.Очистить();
		УстановитьОтображениеПланировщика();
	КонецЕсли;


	Если Не ПлавнаяПрокрутка Тогда
		Календарь.ТекущиеПериодыОтображения.Очистить();
		Календарь.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОкноПодгрузки()

	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);

	Если ВариантПериода = "Месяц" Тогда
		ОкноПодгрузки.Начало = ДобавитьМесяц(ПериодДанных.ДатаНачала, 0);
		ОкноПодгрузки.Конец = ДобавитьМесяц(ПериодДанных.ДатаОкончания, 0);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		ОкноПодгрузки.Начало = ПериодДанных.ДатаНачала - 3 * 7 * 24 * 60 * 60;
		ОкноПодгрузки.Конец = ПериодДанных.ДатаОкончания + 3 * 7 * 24 * 60 * 60;
	ИначеЕсли ВариантПериода = "День" Тогда
		ОкноПодгрузки.Начало = ПериодДанных.ДатаНачала - 3 * 24 * 60 * 60;
		ОкноПодгрузки.Конец = ПериодДанных.ДатаОкончания + 3 * 24 * 60 * 60;
	КонецЕсли

КонецПроцедуры
#КонецОбласти